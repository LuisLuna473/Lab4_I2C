
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000005d0  00000664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800110  00800110  00000674  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e1  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000989  00000000  00000000  00001aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000941  00000000  00000000  0000242e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062b  00000000  00000000  00002f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000073b  00000000  00000000  0000353f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003c7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1c 02 	call	0x438	; 0x438 <main>
  9e:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Master_Init>:
 *  Author: luisa
 */ 
#include "I2C.h"

//Función para inicializar I2C Maestro
void I2C_Master_Init(unsigned SCL_Clock, uint8_t Prescaler){
  a6:	cf 93       	push	r28
  a8:	c6 2f       	mov	r28, r22
	DDRC &= ~((1<<DDC4)|(1<<DDC5)); 
  aa:	27 b1       	in	r18, 0x07	; 7
  ac:	2f 7c       	andi	r18, 0xCF	; 207
  ae:	27 b9       	out	0x07, r18	; 7
	switch(Prescaler){
  b0:	64 30       	cpi	r22, 0x04	; 4
  b2:	79 f0       	breq	.+30     	; 0xd2 <I2C_Master_Init+0x2c>
  b4:	18 f4       	brcc	.+6      	; 0xbc <I2C_Master_Init+0x16>
  b6:	61 30       	cpi	r22, 0x01	; 1
  b8:	31 f0       	breq	.+12     	; 0xc6 <I2C_Master_Init+0x20>
  ba:	23 c0       	rjmp	.+70     	; 0x102 <I2C_Master_Init+0x5c>
  bc:	60 31       	cpi	r22, 0x10	; 16
  be:	91 f0       	breq	.+36     	; 0xe4 <I2C_Master_Init+0x3e>
  c0:	60 34       	cpi	r22, 0x40	; 64
  c2:	c9 f0       	breq	.+50     	; 0xf6 <I2C_Master_Init+0x50>
  c4:	1e c0       	rjmp	.+60     	; 0x102 <I2C_Master_Init+0x5c>
		case 1:
			TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
  c6:	e9 eb       	ldi	r30, 0xB9	; 185
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	20 81       	ld	r18, Z
  cc:	2c 7f       	andi	r18, 0xFC	; 252
  ce:	20 83       	st	Z, r18
		break; 
  d0:	1e c0       	rjmp	.+60     	; 0x10e <I2C_Master_Init+0x68>
		
		case 4:
			TWSR &= ~(1<<TWPS1);
  d2:	e9 eb       	ldi	r30, 0xB9	; 185
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	20 81       	ld	r18, Z
  d8:	2d 7f       	andi	r18, 0xFD	; 253
  da:	20 83       	st	Z, r18
			TWSR |= (1<<TWPS0);
  dc:	20 81       	ld	r18, Z
  de:	21 60       	ori	r18, 0x01	; 1
  e0:	20 83       	st	Z, r18
		break; 
  e2:	15 c0       	rjmp	.+42     	; 0x10e <I2C_Master_Init+0x68>
		case 16:
			TWSR &= ~(1<<TWPS0);
  e4:	e9 eb       	ldi	r30, 0xB9	; 185
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	20 81       	ld	r18, Z
  ea:	2e 7f       	andi	r18, 0xFE	; 254
  ec:	20 83       	st	Z, r18
			TWSR |= (1<<TWPS1);
  ee:	20 81       	ld	r18, Z
  f0:	22 60       	ori	r18, 0x02	; 2
  f2:	20 83       	st	Z, r18
		break;
  f4:	0c c0       	rjmp	.+24     	; 0x10e <I2C_Master_Init+0x68>
		
		case 64:
			TWSR |= (1<<TWPS1)|(1<<TWPS0);
  f6:	e9 eb       	ldi	r30, 0xB9	; 185
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	20 81       	ld	r18, Z
  fc:	23 60       	ori	r18, 0x03	; 3
  fe:	20 83       	st	Z, r18
		break;
 100:	06 c0       	rjmp	.+12     	; 0x10e <I2C_Master_Init+0x68>
		
		default:
			TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
 102:	e9 eb       	ldi	r30, 0xB9	; 185
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	20 81       	ld	r18, Z
 108:	2c 7f       	andi	r18, 0xFC	; 252
 10a:	20 83       	st	Z, r18
			Prescaler = 1;
 10c:	c1 e0       	ldi	r28, 0x01	; 1
		break;
	}
	TWBR = ((F_CPU/SCL_Clock)-16)/(2*Prescaler);
 10e:	9c 01       	movw	r18, r24
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	74 e2       	ldi	r23, 0x24	; 36
 118:	84 ef       	ldi	r24, 0xF4	; 244
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 91 02 	call	0x522	; 0x522 <__divmodsi4>
 120:	ca 01       	movw	r24, r20
 122:	b9 01       	movw	r22, r18
 124:	60 51       	subi	r22, 0x10	; 16
 126:	71 09       	sbc	r23, r1
 128:	81 09       	sbc	r24, r1
 12a:	91 09       	sbc	r25, r1
 12c:	2c 2f       	mov	r18, r28
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	22 0f       	add	r18, r18
 132:	33 1f       	adc	r19, r19
 134:	03 2e       	mov	r0, r19
 136:	00 0c       	add	r0, r0
 138:	44 0b       	sbc	r20, r20
 13a:	55 0b       	sbc	r21, r21
 13c:	0e 94 91 02 	call	0x522	; 0x522 <__divmodsi4>
 140:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1<<TWEN);
 144:	ec eb       	ldi	r30, 0xBC	; 188
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	80 83       	st	Z, r24
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <I2C_Master_Start>:

//Función para inicio de la comunicación I2C Maestro 
uint8_t I2C_Master_Start(void){
	uint8_t estado;
	TWCR = (1<< TWINT)|(1<<TWSTA)|(1<<TWEN); //Iniciar condiciones de start
 152:	84 ea       	ldi	r24, 0xA4	; 164
 154:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR &(1<<TWINT))); //Espera a que termine la flag TWINT
 158:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15c:	88 23       	and	r24, r24
 15e:	e4 f7       	brge	.-8      	; 0x158 <I2C_Master_Start+0x6>
	
	estado = TWSR & 0xF8; //Verifica estado
 160:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	if((estado != 0x08) || (estado != 0x10)){
		return 1; 
	}else{
		return estado;
	}
}
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	08 95       	ret

00000168 <I2C_Master_Stop>:

//Función de parada I2C Maestro
void I2C_Master_Stop(void){
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO); //Inicia el envio secuencia de parada
 168:	84 e9       	ldi	r24, 0x94	; 148
 16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO)); //Esperamos a que el bit se limpie
 16e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 172:	84 fd       	sbrc	r24, 4
 174:	fc cf       	rjmp	.-8      	; 0x16e <I2C_Master_Stop+0x6>
}
 176:	08 95       	ret

00000178 <I2C_Master_Write>:

//Maestro escribe
uint8_t I2C_Master_Write(uint8_t dato){
	uint8_t estado; 
	TWDR = dato; //Cargar dato
 178:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT); //inicia el envio
 17c:	84 e8       	ldi	r24, 0x84	; 132
 17e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while(!(TWCR & (1<<TWINT))); //Espera al flag TWINT
 182:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 186:	88 23       	and	r24, r24
 188:	e4 f7       	brge	.-8      	; 0x182 <I2C_Master_Write+0xa>
	estado = TWSR & 0xF8;
 18a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 18e:	88 7f       	andi	r24, 0xF8	; 248
	//Verificar si se transmitio una SLA +W con ACK, SLA +R con ACK, o un Dato 
	if(estado == 0x18 || estado == 0x28 || estado == 0x40){
 190:	88 31       	cpi	r24, 0x18	; 24
 192:	31 f0       	breq	.+12     	; 0x1a0 <I2C_Master_Write+0x28>
 194:	88 32       	cpi	r24, 0x28	; 40
 196:	31 f0       	breq	.+12     	; 0x1a4 <I2C_Master_Write+0x2c>
 198:	80 34       	cpi	r24, 0x40	; 64
 19a:	29 f4       	brne	.+10     	; 0x1a6 <I2C_Master_Write+0x2e>
		return 1; 
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	08 95       	ret
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	08 95       	ret
 1a4:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return estado;
	}
}
 1a6:	08 95       	ret

000001a8 <I2C_Master_Read>:

//Función de recepción de los datos enviados por el esclavo al maestro 
//Esta función es para leer los datos que estan en el esclavo
uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack){
 1a8:	dc 01       	movw	r26, r24
	uint8_t estado;
	if(ack){
 1aa:	66 23       	and	r22, r22
 1ac:	31 f0       	breq	.+12     	; 0x1ba <I2C_Master_Read+0x12>
		TWCR |= (1<<TWEA); //Lectura con ACK
 1ae:	ec eb       	ldi	r30, 0xBC	; 188
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	90 81       	ld	r25, Z
 1b4:	90 64       	ori	r25, 0x40	; 64
 1b6:	90 83       	st	Z, r25
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <I2C_Master_Read+0x1c>
	}else{
		TWCR &= ~(1<<TWEA); //Lectura sin ACK
 1ba:	ec eb       	ldi	r30, 0xBC	; 188
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	90 81       	ld	r25, Z
 1c0:	9f 7b       	andi	r25, 0xBF	; 191
 1c2:	90 83       	st	Z, r25
	}

	TWCR |= (1<<TWINT); //Iniciamos la Lectura
 1c4:	ec eb       	ldi	r30, 0xBC	; 188
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	90 81       	ld	r25, Z
 1ca:	90 68       	ori	r25, 0x80	; 128
 1cc:	90 83       	st	Z, r25
	while (!(TWCR & (1<<TWINT))); //Espera al flag TWINT
 1ce:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d2:	99 23       	and	r25, r25
 1d4:	e4 f7       	brge	.-8      	; 0x1ce <I2C_Master_Read+0x26>
	estado = TWSR & 0xF8; //Verifica el estado
 1d6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1da:	98 7f       	andi	r25, 0xF8	; 248
	//Verifica dato leido con ACK o sin ACK
	if(estado == 0x58 || estado == 0x50){
 1dc:	98 35       	cpi	r25, 0x58	; 88
 1de:	11 f0       	breq	.+4      	; 0x1e4 <I2C_Master_Read+0x3c>
 1e0:	90 35       	cpi	r25, 0x50	; 80
 1e2:	29 f4       	brne	.+10     	; 0x1ee <I2C_Master_Read+0x46>
		*buffer = TWDR;
 1e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1e8:	8c 93       	st	X, r24
		return 1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	08 95       	ret
	}else{
		return estado;
 1ee:	89 2f       	mov	r24, r25
	}
}
 1f0:	08 95       	ret

000001f2 <LCD_Port>:
 1f2:	80 ff       	sbrs	r24, 0
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <LCD_Port+0xc>
 1f6:	9b b1       	in	r25, 0x0b	; 11
 1f8:	90 61       	ori	r25, 0x10	; 16
 1fa:	9b b9       	out	0x0b, r25	; 11
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <LCD_Port+0x12>
 1fe:	9b b1       	in	r25, 0x0b	; 11
 200:	9f 7e       	andi	r25, 0xEF	; 239
 202:	9b b9       	out	0x0b, r25	; 11
 204:	81 ff       	sbrs	r24, 1
 206:	04 c0       	rjmp	.+8      	; 0x210 <LCD_Port+0x1e>
 208:	9b b1       	in	r25, 0x0b	; 11
 20a:	90 62       	ori	r25, 0x20	; 32
 20c:	9b b9       	out	0x0b, r25	; 11
 20e:	03 c0       	rjmp	.+6      	; 0x216 <LCD_Port+0x24>
 210:	9b b1       	in	r25, 0x0b	; 11
 212:	9f 7d       	andi	r25, 0xDF	; 223
 214:	9b b9       	out	0x0b, r25	; 11
 216:	82 ff       	sbrs	r24, 2
 218:	04 c0       	rjmp	.+8      	; 0x222 <LCD_Port+0x30>
 21a:	9b b1       	in	r25, 0x0b	; 11
 21c:	90 64       	ori	r25, 0x40	; 64
 21e:	9b b9       	out	0x0b, r25	; 11
 220:	03 c0       	rjmp	.+6      	; 0x228 <LCD_Port+0x36>
 222:	9b b1       	in	r25, 0x0b	; 11
 224:	9f 7b       	andi	r25, 0xBF	; 191
 226:	9b b9       	out	0x0b, r25	; 11
 228:	83 ff       	sbrs	r24, 3
 22a:	04 c0       	rjmp	.+8      	; 0x234 <LCD_Port+0x42>
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	8b b9       	out	0x0b, r24	; 11
 232:	08 95       	ret
 234:	8b b1       	in	r24, 0x0b	; 11
 236:	8f 77       	andi	r24, 0x7F	; 127
 238:	8b b9       	out	0x0b, r24	; 11
 23a:	08 95       	ret

0000023c <LCD_CMD>:
 23c:	98 b1       	in	r25, 0x08	; 8
 23e:	9e 7f       	andi	r25, 0xFE	; 254
 240:	98 b9       	out	0x08, r25	; 8
 242:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_Port>
 246:	88 b1       	in	r24, 0x08	; 8
 248:	82 60       	ori	r24, 0x02	; 2
 24a:	88 b9       	out	0x08, r24	; 8
 24c:	8f e7       	ldi	r24, 0x7F	; 127
 24e:	9e e3       	ldi	r25, 0x3E	; 62
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_CMD+0x14>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_CMD+0x1a>
 256:	00 00       	nop
 258:	88 b1       	in	r24, 0x08	; 8
 25a:	8d 7f       	andi	r24, 0xFD	; 253
 25c:	88 b9       	out	0x08, r24	; 8
 25e:	08 95       	ret

00000260 <initLCD4bits>:
 260:	8a b1       	in	r24, 0x0a	; 10
 262:	80 6f       	ori	r24, 0xF0	; 240
 264:	8a b9       	out	0x0a, r24	; 10
 266:	87 b1       	in	r24, 0x07	; 7
 268:	83 60       	ori	r24, 0x03	; 3
 26a:	87 b9       	out	0x07, r24	; 7
 26c:	1b b8       	out	0x0b, r1	; 11
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_Port>
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	89 ef       	ldi	r24, 0xF9	; 249
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <initLCD4bits+0x1a>
 282:	00 c0       	rjmp	.+0      	; 0x284 <initLCD4bits+0x24>
 284:	00 00       	nop
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 28c:	8f e1       	ldi	r24, 0x1F	; 31
 28e:	9e e4       	ldi	r25, 0x4E	; 78
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <initLCD4bits+0x30>
 294:	00 c0       	rjmp	.+0      	; 0x296 <initLCD4bits+0x36>
 296:	00 00       	nop
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 29e:	8f ed       	ldi	r24, 0xDF	; 223
 2a0:	9b ea       	ldi	r25, 0xAB	; 171
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <initLCD4bits+0x42>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <initLCD4bits+0x48>
 2a8:	00 00       	nop
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 2bc:	88 e0       	ldi	r24, 0x08	; 8
 2be:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 2c8:	8c e0       	ldi	r24, 0x0C	; 12
 2ca:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 2e6:	08 95       	ret

000002e8 <LCD_Write_Char>:
 2e8:	cf 93       	push	r28
 2ea:	c8 2f       	mov	r28, r24
 2ec:	cf 70       	andi	r28, 0x0F	; 15
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	98 b9       	out	0x08, r25	; 8
 2f2:	82 95       	swap	r24
 2f4:	8f 70       	andi	r24, 0x0F	; 15
 2f6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_Port>
 2fa:	88 b1       	in	r24, 0x08	; 8
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	88 b9       	out	0x08, r24	; 8
 300:	8f e7       	ldi	r24, 0x7F	; 127
 302:	9e e3       	ldi	r25, 0x3E	; 62
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_Write_Char+0x1c>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_Write_Char+0x22>
 30a:	00 00       	nop
 30c:	88 b1       	in	r24, 0x08	; 8
 30e:	8d 7f       	andi	r24, 0xFD	; 253
 310:	88 b9       	out	0x08, r24	; 8
 312:	8c 2f       	mov	r24, r28
 314:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_Port>
 318:	88 b1       	in	r24, 0x08	; 8
 31a:	82 60       	ori	r24, 0x02	; 2
 31c:	88 b9       	out	0x08, r24	; 8
 31e:	8f e7       	ldi	r24, 0x7F	; 127
 320:	9e e3       	ldi	r25, 0x3E	; 62
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <LCD_Write_Char+0x3a>
 326:	00 c0       	rjmp	.+0      	; 0x328 <LCD_Write_Char+0x40>
 328:	00 00       	nop
 32a:	88 b1       	in	r24, 0x08	; 8
 32c:	8d 7f       	andi	r24, 0xFD	; 253
 32e:	88 b9       	out	0x08, r24	; 8
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <LCD_Write_String>:
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	8c 01       	movw	r16, r24
 33e:	c0 e0       	ldi	r28, 0x00	; 0
 340:	d0 e0       	ldi	r29, 0x00	; 0
 342:	03 c0       	rjmp	.+6      	; 0x34a <LCD_Write_String+0x16>
 344:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_Write_Char>
 348:	21 96       	adiw	r28, 0x01	; 1
 34a:	f8 01       	movw	r30, r16
 34c:	ec 0f       	add	r30, r28
 34e:	fd 1f       	adc	r31, r29
 350:	80 81       	ld	r24, Z
 352:	81 11       	cpse	r24, r1
 354:	f7 cf       	rjmp	.-18     	; 0x344 <LCD_Write_String+0x10>
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	08 95       	ret

00000360 <LCD_Set_Cursor>:
 360:	cf 93       	push	r28
 362:	61 30       	cpi	r22, 0x01	; 1
 364:	59 f4       	brne	.+22     	; 0x37c <LCD_Set_Cursor+0x1c>
 366:	81 58       	subi	r24, 0x81	; 129
 368:	c8 2f       	mov	r28, r24
 36a:	cf 70       	andi	r28, 0x0F	; 15
 36c:	82 95       	swap	r24
 36e:	8f 70       	andi	r24, 0x0F	; 15
 370:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 374:	8c 2f       	mov	r24, r28
 376:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 37a:	0c c0       	rjmp	.+24     	; 0x394 <LCD_Set_Cursor+0x34>
 37c:	62 30       	cpi	r22, 0x02	; 2
 37e:	51 f4       	brne	.+20     	; 0x394 <LCD_Set_Cursor+0x34>
 380:	81 54       	subi	r24, 0x41	; 65
 382:	c8 2f       	mov	r28, r24
 384:	cf 70       	andi	r28, 0x0F	; 15
 386:	82 95       	swap	r24
 388:	8f 70       	andi	r24, 0x0F	; 15
 38a:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 38e:	8c 2f       	mov	r24, r28
 390:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_CMD>
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <newLista>:
		

    }
}

void newLista(char *lista, int valor) {
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	fc 01       	movw	r30, r24
 39e:	9b 01       	movw	r18, r22
	lista[0] = '0' + (valor / 100);
 3a0:	cb 01       	movw	r24, r22
 3a2:	64 e6       	ldi	r22, 0x64	; 100
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__divmodhi4>
 3aa:	60 5d       	subi	r22, 0xD0	; 208
 3ac:	60 83       	st	Z, r22
	lista[1] = '0' + ((valor / 10) % 10);
 3ae:	ca e0       	ldi	r28, 0x0A	; 10
 3b0:	d0 e0       	ldi	r29, 0x00	; 0
 3b2:	c9 01       	movw	r24, r18
 3b4:	be 01       	movw	r22, r28
 3b6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__divmodhi4>
 3ba:	28 2f       	mov	r18, r24
 3bc:	cb 01       	movw	r24, r22
 3be:	be 01       	movw	r22, r28
 3c0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__divmodhi4>
 3c4:	80 5d       	subi	r24, 0xD0	; 208
 3c6:	81 83       	std	Z+1, r24	; 0x01
	lista[2] = '0' + (valor % 10);
 3c8:	20 5d       	subi	r18, 0xD0	; 208
 3ca:	22 83       	std	Z+2, r18	; 0x02
	lista[3] = '\0';
 3cc:	13 82       	std	Z+3, r1	; 0x03
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <UpdateCONTADOR>:

void UpdateCONTADOR(char *CONTlista, int valorCONT) {
 3d4:	fc 01       	movw	r30, r24
 3d6:	cb 01       	movw	r24, r22
	CONTlista[0] = '0' + (valorCONT / 10); // Decena
 3d8:	6a e0       	ldi	r22, 0x0A	; 10
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__divmodhi4>
 3e0:	60 5d       	subi	r22, 0xD0	; 208
 3e2:	60 83       	st	Z, r22
	CONTlista[1] = '0' + (valorCONT % 10); // Unidad
 3e4:	80 5d       	subi	r24, 0xD0	; 208
 3e6:	81 83       	std	Z+1, r24	; 0x01
	CONTlista[2] = '\0'; // Fin de cadena
 3e8:	12 82       	std	Z+2, r1	; 0x02
 3ea:	08 95       	ret

000003ec <Slave1>:
}


void Slave1(void){
	I2C_Master_Start();
 3ec:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_Master_Start>
	bufferI2C = (slave1 << 1) | 0b00000001;  // Mandando Maestro a leer (SLA + R)
 3f0:	81 e6       	ldi	r24, 0x61	; 97
 3f2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <bufferI2C>
	if (I2C_Master_Write(bufferI2C) != 1) {  // Si no se recibe ACK, detener la comunicación
 3f6:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Master_Write>
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	11 f0       	breq	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		I2C_Master_Stop();
 3fe:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Master_Stop>
	}
	
	if (I2C_Master_Read(&receivedValue, 0) == 1) {  // Leer el valor enviado por el esclavo
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	81 e1       	ldi	r24, 0x11	; 17
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Master_Read>
		// El valor recibido está en receivedValue
	}
	
	I2C_Master_Stop();
 40c:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Master_Stop>
 410:	08 95       	ret

00000412 <Slave2>:
}

void Slave2(void){
	I2C_Master_Start();
 412:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_Master_Start>
	bufferI2C = (slave2 << 1) | 0b00000001;  // Mandando Maestro a leer (SLA + R)
 416:	81 e8       	ldi	r24, 0x81	; 129
 418:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <bufferI2C>
	if (I2C_Master_Write(bufferI2C) != 1) {  // Si no se recibe ACK, detener la comunicación
 41c:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Master_Write>
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	11 f0       	breq	.+4      	; 0x428 <Slave2+0x16>
		I2C_Master_Stop();
 424:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Master_Stop>
	}
	
	if (I2C_Master_Read(&receivedValue2, 0) == 1) {  // Leer el valor enviado por el esclavo
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	80 e1       	ldi	r24, 0x10	; 16
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <I2C_Master_Read>
		// El valor recibido está en receivedValue
	}
	
	I2C_Master_Stop();
 432:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Master_Stop>
 436:	08 95       	ret

00000438 <main>:
void Slave2(void);

int main(void)
{
    
	I2C_Master_Init(100000,1); //inicializar como Master Fscl 100Khz, preescaler 1
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	80 ea       	ldi	r24, 0xA0	; 160
 43c:	96 e8       	ldi	r25, 0x86	; 134
 43e:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Master_Init>
	initLCD4bits();
 442:	0e 94 30 01 	call	0x260	; 0x260 <initLCD4bits>
	LCD_Set_Cursor(1,1); //
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_Set_Cursor>
	LCD_Write_String("S1:");
 44e:	88 e0       	ldi	r24, 0x08	; 8
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_Write_String>
	
	
	LCD_Set_Cursor(6,1);
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	86 e0       	ldi	r24, 0x06	; 6
 45a:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_Set_Cursor>
	LCD_Write_String("S2:");
 45e:	8c e0       	ldi	r24, 0x0C	; 12
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_Write_String>
	
//	DDRD |= (1<<DDD2);
	DDRC |= (1<<DDC3);
 466:	87 b1       	in	r24, 0x07	; 7
 468:	88 60       	ori	r24, 0x08	; 8
 46a:	87 b9       	out	0x07, r24	; 7
			I2C_Master_Stop();
			continue;
			
		}*/
		
		Slave1();
 46c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Slave1>
		
		PORTD &= ~(1<<PORTD2);
 470:	8b b1       	in	r24, 0x0b	; 11
 472:	8b 7f       	andi	r24, 0xFB	; 251
 474:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 476:	2f ef       	ldi	r18, 0xFF	; 255
 478:	81 ee       	ldi	r24, 0xE1	; 225
 47a:	94 e0       	ldi	r25, 0x04	; 4
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	80 40       	sbci	r24, 0x00	; 0
 480:	90 40       	sbci	r25, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <main+0x44>
 484:	00 c0       	rjmp	.+0      	; 0x486 <main+0x4e>
 486:	00 00       	nop
		_delay_ms(100);
		//_delay_ms(2000);
		
		newLista(lista1, receivedValue);
 488:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <receivedValue>
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	86 e1       	ldi	r24, 0x16	; 22
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	0e 94 cc 01 	call	0x398	; 0x398 <newLista>
		newLista(lista3, 255);
 496:	6f ef       	ldi	r22, 0xFF	; 255
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	0e 94 cc 01 	call	0x398	; 0x398 <newLista>
		
		LCD_Set_Cursor(1,2);
 4a2:	62 e0       	ldi	r22, 0x02	; 2
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_Set_Cursor>
		LCD_Write_String(lista1);
 4aa:	86 e1       	ldi	r24, 0x16	; 22
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_Write_String>
		//LCD_Write_String('0');
		
		
		Slave2();
 4b2:	0e 94 09 02 	call	0x412	; 0x412 <Slave2>
		PORTC &= ~(1<<PORTC3);
 4b6:	88 b1       	in	r24, 0x08	; 8
 4b8:	87 7f       	andi	r24, 0xF7	; 247
 4ba:	88 b9       	out	0x08, r24	; 8
 4bc:	2f ef       	ldi	r18, 0xFF	; 255
 4be:	81 ee       	ldi	r24, 0xE1	; 225
 4c0:	94 e0       	ldi	r25, 0x04	; 4
 4c2:	21 50       	subi	r18, 0x01	; 1
 4c4:	80 40       	sbci	r24, 0x00	; 0
 4c6:	90 40       	sbci	r25, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <main+0x8a>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <main+0x94>
 4cc:	00 00       	nop
		_delay_ms(100);
		
		UpdateCONTADOR(listaCONT1, receivedValue2);
 4ce:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	8a e1       	ldi	r24, 0x1A	; 26
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <UpdateCONTADOR>
		UpdateCONTADOR(listaCONT2, 15);
 4dc:	6f e0       	ldi	r22, 0x0F	; 15
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <UpdateCONTADOR>
		
		LCD_Set_Cursor(6,2);
 4e8:	62 e0       	ldi	r22, 0x02	; 2
 4ea:	86 e0       	ldi	r24, 0x06	; 6
 4ec:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_Set_Cursor>
		LCD_Write_String(listaCONT1);
 4f0:	8a e1       	ldi	r24, 0x1A	; 26
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_Write_String>
 4f8:	b9 cf       	rjmp	.-142    	; 0x46c <main+0x34>

000004fa <__divmodhi4>:
 4fa:	97 fb       	bst	r25, 7
 4fc:	07 2e       	mov	r0, r23
 4fe:	16 f4       	brtc	.+4      	; 0x504 <__divmodhi4+0xa>
 500:	00 94       	com	r0
 502:	07 d0       	rcall	.+14     	; 0x512 <__divmodhi4_neg1>
 504:	77 fd       	sbrc	r23, 7
 506:	09 d0       	rcall	.+18     	; 0x51a <__divmodhi4_neg2>
 508:	0e 94 b0 02 	call	0x560	; 0x560 <__udivmodhi4>
 50c:	07 fc       	sbrc	r0, 7
 50e:	05 d0       	rcall	.+10     	; 0x51a <__divmodhi4_neg2>
 510:	3e f4       	brtc	.+14     	; 0x520 <__divmodhi4_exit>

00000512 <__divmodhi4_neg1>:
 512:	90 95       	com	r25
 514:	81 95       	neg	r24
 516:	9f 4f       	sbci	r25, 0xFF	; 255
 518:	08 95       	ret

0000051a <__divmodhi4_neg2>:
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255

00000520 <__divmodhi4_exit>:
 520:	08 95       	ret

00000522 <__divmodsi4>:
 522:	05 2e       	mov	r0, r21
 524:	97 fb       	bst	r25, 7
 526:	1e f4       	brtc	.+6      	; 0x52e <__divmodsi4+0xc>
 528:	00 94       	com	r0
 52a:	0e 94 a8 02 	call	0x550	; 0x550 <__negsi2>
 52e:	57 fd       	sbrc	r21, 7
 530:	07 d0       	rcall	.+14     	; 0x540 <__divmodsi4_neg2>
 532:	0e 94 c4 02 	call	0x588	; 0x588 <__udivmodsi4>
 536:	07 fc       	sbrc	r0, 7
 538:	03 d0       	rcall	.+6      	; 0x540 <__divmodsi4_neg2>
 53a:	4e f4       	brtc	.+18     	; 0x54e <__divmodsi4_exit>
 53c:	0c 94 a8 02 	jmp	0x550	; 0x550 <__negsi2>

00000540 <__divmodsi4_neg2>:
 540:	50 95       	com	r21
 542:	40 95       	com	r20
 544:	30 95       	com	r19
 546:	21 95       	neg	r18
 548:	3f 4f       	sbci	r19, 0xFF	; 255
 54a:	4f 4f       	sbci	r20, 0xFF	; 255
 54c:	5f 4f       	sbci	r21, 0xFF	; 255

0000054e <__divmodsi4_exit>:
 54e:	08 95       	ret

00000550 <__negsi2>:
 550:	90 95       	com	r25
 552:	80 95       	com	r24
 554:	70 95       	com	r23
 556:	61 95       	neg	r22
 558:	7f 4f       	sbci	r23, 0xFF	; 255
 55a:	8f 4f       	sbci	r24, 0xFF	; 255
 55c:	9f 4f       	sbci	r25, 0xFF	; 255
 55e:	08 95       	ret

00000560 <__udivmodhi4>:
 560:	aa 1b       	sub	r26, r26
 562:	bb 1b       	sub	r27, r27
 564:	51 e1       	ldi	r21, 0x11	; 17
 566:	07 c0       	rjmp	.+14     	; 0x576 <__udivmodhi4_ep>

00000568 <__udivmodhi4_loop>:
 568:	aa 1f       	adc	r26, r26
 56a:	bb 1f       	adc	r27, r27
 56c:	a6 17       	cp	r26, r22
 56e:	b7 07       	cpc	r27, r23
 570:	10 f0       	brcs	.+4      	; 0x576 <__udivmodhi4_ep>
 572:	a6 1b       	sub	r26, r22
 574:	b7 0b       	sbc	r27, r23

00000576 <__udivmodhi4_ep>:
 576:	88 1f       	adc	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	5a 95       	dec	r21
 57c:	a9 f7       	brne	.-22     	; 0x568 <__udivmodhi4_loop>
 57e:	80 95       	com	r24
 580:	90 95       	com	r25
 582:	bc 01       	movw	r22, r24
 584:	cd 01       	movw	r24, r26
 586:	08 95       	ret

00000588 <__udivmodsi4>:
 588:	a1 e2       	ldi	r26, 0x21	; 33
 58a:	1a 2e       	mov	r1, r26
 58c:	aa 1b       	sub	r26, r26
 58e:	bb 1b       	sub	r27, r27
 590:	fd 01       	movw	r30, r26
 592:	0d c0       	rjmp	.+26     	; 0x5ae <__udivmodsi4_ep>

00000594 <__udivmodsi4_loop>:
 594:	aa 1f       	adc	r26, r26
 596:	bb 1f       	adc	r27, r27
 598:	ee 1f       	adc	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	a2 17       	cp	r26, r18
 59e:	b3 07       	cpc	r27, r19
 5a0:	e4 07       	cpc	r30, r20
 5a2:	f5 07       	cpc	r31, r21
 5a4:	20 f0       	brcs	.+8      	; 0x5ae <__udivmodsi4_ep>
 5a6:	a2 1b       	sub	r26, r18
 5a8:	b3 0b       	sbc	r27, r19
 5aa:	e4 0b       	sbc	r30, r20
 5ac:	f5 0b       	sbc	r31, r21

000005ae <__udivmodsi4_ep>:
 5ae:	66 1f       	adc	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	1a 94       	dec	r1
 5b8:	69 f7       	brne	.-38     	; 0x594 <__udivmodsi4_loop>
 5ba:	60 95       	com	r22
 5bc:	70 95       	com	r23
 5be:	80 95       	com	r24
 5c0:	90 95       	com	r25
 5c2:	9b 01       	movw	r18, r22
 5c4:	ac 01       	movw	r20, r24
 5c6:	bd 01       	movw	r22, r26
 5c8:	cf 01       	movw	r24, r30
 5ca:	08 95       	ret

000005cc <_exit>:
 5cc:	f8 94       	cli

000005ce <__stop_program>:
 5ce:	ff cf       	rjmp	.-2      	; 0x5ce <__stop_program>
