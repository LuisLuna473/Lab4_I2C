
Slave2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000330  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000970  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080c  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063a  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000264  00000000  00000000  000021af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_24>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	a1 00       	.word	0x00a1	; ????
  6a:	a5 00       	.word	0x00a5	; ????
  6c:	a9 00       	.word	0x00a9	; ????
  6e:	ad 00       	.word	0x00ad	; ????
  70:	b1 00       	.word	0x00b1	; ????
  72:	b5 00       	.word	0x00b5	; ????
  74:	b9 00       	.word	0x00b9	; ????
  76:	bd 00       	.word	0x00bd	; ????
  78:	c1 00       	.word	0x00c1	; ????
  7a:	c5 00       	.word	0x00c5	; ????
  7c:	c9 00       	.word	0x00c9	; ????
  7e:	cd 00       	.word	0x00cd	; ????
  80:	d1 00       	.word	0x00d1	; ????
  82:	d5 00       	.word	0x00d5	; ????
  84:	d9 00       	.word	0x00d9	; ????

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a1 30       	cpi	r26, 0x01	; 1
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  a6:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <I2C_Slave_Init>:
  ae:	97 b1       	in	r25, 0x07	; 7
  b0:	9f 7c       	andi	r25, 0xCF	; 207
  b2:	97 b9       	out	0x07, r25	; 7
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
  be:	85 e4       	ldi	r24, 0x45	; 69
  c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c4:	08 95       	ret

000000c6 <setup>:

volatile uint8_t contador = 0;

void setup(void)
{
	cli(); // Deshabilitar interrupciones globales
  c6:	f8 94       	cli

	// Configuración de pines de entrada
	DDRB &= ~(1 << PINB0); // Definir PB0 como entrada
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PINB0); // Habilitar pull-up interno en PB0
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	85 b9       	out	0x05, r24	; 5
	
	DDRB &= ~(1 << PINB1); // Definir PB1 como entrada
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PINB1); // Habilitar pull-up interno en PB1
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	85 b9       	out	0x05, r24	; 5
	
	// Configuración de pines de salida para LEDs
	DDRD |= (1 << DDD2) | (1 << DDD3) | (1 << DDD4) | (1 << DDD5); // Configurar PD2 a PD5 como salidas
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	8c 63       	ori	r24, 0x3C	; 60
  e4:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5)); // Inicializar LEDs apagados
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	83 7c       	andi	r24, 0xC3	; 195
  ea:	8b b9       	out	0x0b, r24	; 11
	
	// Configuración de interrupciones
	PCICR |= (1 << PCIE0); // Habilitar interrupciones de cambio de pin para PCINT0 (PB0) y PCINT1 (PB1)
  ec:	e8 e6       	ldi	r30, 0x68	; 104
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1); // Habilitar máscara de interrupciones para PCINT0 y PCINT1
  f6:	eb e6       	ldi	r30, 0x6B	; 107
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	80 83       	st	Z, r24
	
	// Inicialización del I2C
	I2C_Slave_Init(SlaveAddress);
 100:	80 e4       	ldi	r24, 0x40	; 64
 102:	0e 94 57 00 	call	0xae	; 0xae <I2C_Slave_Init>
	
	sei(); // Habilitar interrupciones globales
 106:	78 94       	sei
 108:	08 95       	ret

0000010a <main>:
}

int main(void)
{
	setup(); // Configuración inicial
 10a:	0e 94 63 00 	call	0xc6	; 0xc6 <setup>

	while (1)
	{
		// Limitar el contador a 4 bits (0-15)
		if (contador > 15)
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	80 31       	cpi	r24, 0x10	; 16
 114:	18 f0       	brcs	.+6      	; 0x11c <main+0x12>
		contador = 0;
 116:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0x16>
		else if (contador < 0)
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		contador = 15;

		// Actualizar LEDs según el valor del contador usando switch
		PORTD &= ~((1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5)); // Apagar todos los LEDs
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	83 7c       	andi	r24, 0xC3	; 195
 124:	8b b9       	out	0x0b, r24	; 11
		switch (contador) {
 126:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	8e 2f       	mov	r24, r30
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	ef 30       	cpi	r30, 0x0F	; 15
 134:	f1 05       	cpc	r31, r1
 136:	08 f0       	brcs	.+2      	; 0x13a <main+0x30>
 138:	3f c0       	rjmp	.+126    	; 0x1b8 <main+0xae>
 13a:	ec 5c       	subi	r30, 0xCC	; 204
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__tablejump2__>
			case 1:
			PORTD |= (1 << PORTD2); // Encender PD2
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	84 60       	ori	r24, 0x04	; 4
 146:	8b b9       	out	0x0b, r24	; 11
			break;
 148:	37 c0       	rjmp	.+110    	; 0x1b8 <main+0xae>
			case 2:
			PORTD |= (1 << PORTD3); // Encender PD3
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	88 60       	ori	r24, 0x08	; 8
 14e:	8b b9       	out	0x0b, r24	; 11
			break;
 150:	33 c0       	rjmp	.+102    	; 0x1b8 <main+0xae>
			case 3:
			PORTD |= (1 << PORTD2) | (1 << PORTD3); // Encender PD2 y PD3
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	8c 60       	ori	r24, 0x0C	; 12
 156:	8b b9       	out	0x0b, r24	; 11
			break;
 158:	2f c0       	rjmp	.+94     	; 0x1b8 <main+0xae>
			case 4:
			PORTD |= (1 << PORTD4); // Encender PD4
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	8b b9       	out	0x0b, r24	; 11
			break;
 160:	2b c0       	rjmp	.+86     	; 0x1b8 <main+0xae>
			case 5:
			PORTD |= (1 << PORTD2) | (1 << PORTD4); // Encender PD2 y PD4
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	84 61       	ori	r24, 0x14	; 20
 166:	8b b9       	out	0x0b, r24	; 11
			break;
 168:	27 c0       	rjmp	.+78     	; 0x1b8 <main+0xae>
			case 6:
			PORTD |= (1 << PORTD3) | (1 << PORTD4); // Encender PD3 y PD4
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	88 61       	ori	r24, 0x18	; 24
 16e:	8b b9       	out	0x0b, r24	; 11
			break;
 170:	23 c0       	rjmp	.+70     	; 0x1b8 <main+0xae>
			case 7:
			PORTD |= (1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4); // Encender PD2, PD3 y PD4
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	8c 61       	ori	r24, 0x1C	; 28
 176:	8b b9       	out	0x0b, r24	; 11
			break;
 178:	1f c0       	rjmp	.+62     	; 0x1b8 <main+0xae>
			case 8:
			PORTD |= (1 << PORTD5); // Encender PD5
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	80 62       	ori	r24, 0x20	; 32
 17e:	8b b9       	out	0x0b, r24	; 11
			break;
 180:	1b c0       	rjmp	.+54     	; 0x1b8 <main+0xae>
			case 9:
			PORTD |= (1 << PORTD2) | (1 << PORTD5); // Encender PD2 y PD5
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	84 62       	ori	r24, 0x24	; 36
 186:	8b b9       	out	0x0b, r24	; 11
			break;
 188:	17 c0       	rjmp	.+46     	; 0x1b8 <main+0xae>
			case 10:
			PORTD |= (1 << PORTD3) | (1 << PORTD5); // Encender PD3 y PD5
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	88 62       	ori	r24, 0x28	; 40
 18e:	8b b9       	out	0x0b, r24	; 11
			break;
 190:	13 c0       	rjmp	.+38     	; 0x1b8 <main+0xae>
			case 11:
			PORTD |= (1 << PORTD2) | (1 << PORTD3) | (1 << PORTD5); // Encender PD2, PD3 y PD5
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	8c 62       	ori	r24, 0x2C	; 44
 196:	8b b9       	out	0x0b, r24	; 11
			break;
 198:	0f c0       	rjmp	.+30     	; 0x1b8 <main+0xae>
			case 12:
			PORTD |= (1 << PORTD4) | (1 << PORTD5); // Encender PD4 y PD5
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	80 63       	ori	r24, 0x30	; 48
 19e:	8b b9       	out	0x0b, r24	; 11
			break;
 1a0:	0b c0       	rjmp	.+22     	; 0x1b8 <main+0xae>
			case 13:
			PORTD |= (1 << PORTD2) | (1 << PORTD4) | (1 << PORTD5); // Encender PD2, PD4 y PD5
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	84 63       	ori	r24, 0x34	; 52
 1a6:	8b b9       	out	0x0b, r24	; 11
			break;
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <main+0xae>
			case 14:
			PORTD |= (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5); // Encender PD3, PD4 y PD5
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	88 63       	ori	r24, 0x38	; 56
 1ae:	8b b9       	out	0x0b, r24	; 11
			break;
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <main+0xae>
			case 15:
			PORTD |= (1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5); // Encender todos los LEDs
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	8c 63       	ori	r24, 0x3C	; 60
 1b6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	81 ee       	ldi	r24, 0xE1	; 225
 1bc:	94 e0       	ldi	r25, 0x04	; 4
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0xb4>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0xbe>
 1c8:	00 00       	nop
 1ca:	a1 cf       	rjmp	.-190    	; 0x10e <main+0x4>

000001cc <__vector_24>:
		_delay_ms(100); // Pequeño retraso para evitar parpadeo rápido
	}
}

ISR(TWI_vect)
{
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	8f 93       	push	r24
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
	uint8_t estado = TWSR & 0xF8;
 1dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1e0:	88 7f       	andi	r24, 0xF8	; 248
	switch (estado) {
 1e2:	80 39       	cpi	r24, 0x90	; 144
 1e4:	c9 f0       	breq	.+50     	; 0x218 <__vector_24+0x4c>
 1e6:	38 f4       	brcc	.+14     	; 0x1f6 <__vector_24+0x2a>
 1e8:	80 37       	cpi	r24, 0x70	; 112
 1ea:	81 f0       	breq	.+32     	; 0x20c <__vector_24+0x40>
 1ec:	80 38       	cpi	r24, 0x80	; 128
 1ee:	a1 f0       	breq	.+40     	; 0x218 <__vector_24+0x4c>
 1f0:	80 36       	cpi	r24, 0x60	; 96
 1f2:	41 f5       	brne	.+80     	; 0x244 <__vector_24+0x78>
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <__vector_24+0x40>
 1f6:	88 3b       	cpi	r24, 0xB8	; 184
 1f8:	a9 f0       	breq	.+42     	; 0x224 <__vector_24+0x58>
 1fa:	18 f4       	brcc	.+6      	; 0x202 <__vector_24+0x36>
 1fc:	88 3a       	cpi	r24, 0xA8	; 168
 1fe:	91 f0       	breq	.+36     	; 0x224 <__vector_24+0x58>
 200:	21 c0       	rjmp	.+66     	; 0x244 <__vector_24+0x78>
 202:	80 3c       	cpi	r24, 0xC0	; 192
 204:	c9 f0       	breq	.+50     	; 0x238 <__vector_24+0x6c>
 206:	88 3c       	cpi	r24, 0xC8	; 200
 208:	b9 f0       	breq	.+46     	; 0x238 <__vector_24+0x6c>
 20a:	1c c0       	rjmp	.+56     	; 0x244 <__vector_24+0x78>
		case 0x60:  // SLA+W recibido, ACK enviado
		case 0x70:  // Dirección de transmisión general recibida, ACK enviado
		TWCR |= (1<<TWINT) | (1<<TWEA);  // Preparar para recibir más datos
 20c:	ec eb       	ldi	r30, 0xBC	; 188
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	80 6c       	ori	r24, 0xC0	; 192
 214:	80 83       	st	Z, r24
		break;
 216:	1b c0       	rjmp	.+54     	; 0x24e <__vector_24+0x82>
		case 0x80:  // Dato recibido, ACK enviado
		case 0x90:  // Dato recibido en modo transmisión general, ACK enviado
		TWCR |= (1<<TWINT) | (1<<TWEA);  // Preparar para recibir más datos
 218:	ec eb       	ldi	r30, 0xBC	; 188
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	80 6c       	ori	r24, 0xC0	; 192
 220:	80 83       	st	Z, r24
		break;
 222:	15 c0       	rjmp	.+42     	; 0x24e <__vector_24+0x82>
		case 0xA8:  // SLA+R recibido, ACK enviado
		case 0xB8:  // Dato transmitido, ACK recibido
		TWDR = contador;  // Enviar valor del contador
 224:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 228:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1<<TWINT) | (1<<TWEA);  // Preparar para la siguiente transmisión
 22c:	ec eb       	ldi	r30, 0xBC	; 188
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 6c       	ori	r24, 0xC0	; 192
 234:	80 83       	st	Z, r24
		break;
 236:	0b c0       	rjmp	.+22     	; 0x24e <__vector_24+0x82>
		case 0xC0:  // Dato transmitido, NACK recibido
		case 0xC8:  // Último dato transmitido, ACK recibido
		TWCR |= (1<<TWINT) | (1<<TWEA);  // Preparar para la próxima recepción
 238:	ec eb       	ldi	r30, 0xBC	; 188
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	80 6c       	ori	r24, 0xC0	; 192
 240:	80 83       	st	Z, r24
		break;
 242:	05 c0       	rjmp	.+10     	; 0x24e <__vector_24+0x82>
		default:  // Se libera el bus de cualquier error
		TWCR |= (1<<TWINT) | (1<<TWSTO);
 244:	ec eb       	ldi	r30, 0xBC	; 188
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	80 69       	ori	r24, 0x90	; 144
 24c:	80 83       	st	Z, r24
	}
}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	8f 91       	pop	r24
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_3>:

ISR(PCINT0_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	80 e7       	ldi	r24, 0x70	; 112
 272:	92 e0       	ldi	r25, 0x02	; 2
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <__vector_3+0x16>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <__vector_3+0x20>
 27e:	00 00       	nop
	_delay_ms(50); // Pequeño retraso para el debounce de los botones

	if ((PINB & (1 << PINB1)) == 0) // Verificar si se presionó el botón de incremento
 280:	19 99       	sbic	0x03, 1	; 3
 282:	05 c0       	rjmp	.+10     	; 0x28e <__vector_3+0x30>
	contador++;
 284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 288:	8f 5f       	subi	r24, 0xFF	; 255
 28a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if ((PINB & (1 << PINB0)) == 0) // Verificar si se presionó el botón de decremento
 28e:	18 99       	sbic	0x03, 0	; 3
 290:	05 c0       	rjmp	.+10     	; 0x29c <__vector_3+0x3e>
	contador--;
 292:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 296:	81 50       	subi	r24, 0x01	; 1
 298:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <__tablejump2__>:
 2ac:	ee 0f       	add	r30, r30
 2ae:	ff 1f       	adc	r31, r31
 2b0:	05 90       	lpm	r0, Z+
 2b2:	f4 91       	lpm	r31, Z
 2b4:	e0 2d       	mov	r30, r0
 2b6:	09 94       	ijmp

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
