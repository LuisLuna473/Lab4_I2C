
Slave1_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000033a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d7  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084b  00000000  00000000  00000e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a9  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000491  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ec  00000000  00000000  000022bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000025a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_21>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_24>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	5a 00       	.word	0x005a	; ????
  6a:	65 00       	.word	0x0065	; ????
  6c:	73 00       	.word	0x0073	; ????
  6e:	81 00       	.word	0x0081	; ????
  70:	8f 00       	.word	0x008f	; ????
  72:	9d 00       	.word	0x009d	; ????
  74:	ab 00       	.word	0x00ab	; ????
  76:	b4 00       	.word	0x00b4	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_clear_bss>:
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a1 30       	cpi	r26, 0x01	; 1
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  98:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <SetupADC>:
 * Created: 2/08/2024 10:52:47
 *  Author: luisa
 */ 
#include "ADC.h"
void SetupADC(uint8_t PinADC){
	switch (PinADC)
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	91 05       	cpc	r25, r1
  a6:	08 f0       	brcs	.+2      	; 0xaa <SetupADC+0xa>
  a8:	67 c0       	rjmp	.+206    	; 0x178 <SetupADC+0xd8>
  aa:	fc 01       	movw	r30, r24
  ac:	ec 5c       	subi	r30, 0xCC	; 204
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__tablejump2__>
	{
		case PC0 :
		DIDR0 |= (1<<ADC0D);
  b4:	ee e7       	ldi	r30, 0x7E	; 126
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	80 83       	st	Z, r24
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 7f       	andi	r24, 0xF8	; 248
  c6:	80 83       	st	Z, r24
		break;
  c8:	57 c0       	rjmp	.+174    	; 0x178 <SetupADC+0xd8>
		case PC1 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
  ca:	ec e7       	ldi	r30, 0x7C	; 124
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 7f       	andi	r24, 0xF8	; 248
  d2:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX0);
  d4:	80 81       	ld	r24, Z
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC1D);
  da:	ee e7       	ldi	r30, 0x7E	; 126
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
		break;
  e4:	49 c0       	rjmp	.+146    	; 0x178 <SetupADC+0xd8>
		case PC2 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
  e6:	ec e7       	ldi	r30, 0x7C	; 124
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 7f       	andi	r24, 0xF8	; 248
  ee:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX1);
  f0:	80 81       	ld	r24, Z
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC2D);
  f6:	ee e7       	ldi	r30, 0x7E	; 126
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	80 83       	st	Z, r24
		break;
 100:	3b c0       	rjmp	.+118    	; 0x178 <SetupADC+0xd8>
		case PC3 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 102:	ec e7       	ldi	r30, 0x7C	; 124
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 7f       	andi	r24, 0xF8	; 248
 10a:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX0)|(1<<MUX1);
 10c:	80 81       	ld	r24, Z
 10e:	83 60       	ori	r24, 0x03	; 3
 110:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC3D);
 112:	ee e7       	ldi	r30, 0x7E	; 126
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	80 83       	st	Z, r24
		break;
 11c:	2d c0       	rjmp	.+90     	; 0x178 <SetupADC+0xd8>
		case PC4 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 11e:	ec e7       	ldi	r30, 0x7C	; 124
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2);
 128:	80 81       	ld	r24, Z
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC4D);
 12e:	ee e7       	ldi	r30, 0x7E	; 126
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 61       	ori	r24, 0x10	; 16
 136:	80 83       	st	Z, r24
		break;
 138:	1f c0       	rjmp	.+62     	; 0x178 <SetupADC+0xd8>
		case PC5 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 13a:	ec e7       	ldi	r30, 0x7C	; 124
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 7f       	andi	r24, 0xF8	; 248
 142:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2)|(1<<MUX0);
 144:	80 81       	ld	r24, Z
 146:	85 60       	ori	r24, 0x05	; 5
 148:	80 83       	st	Z, r24
		DIDR0 |= (1<<ADC5D);
 14a:	ee e7       	ldi	r30, 0x7E	; 126
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	80 62       	ori	r24, 0x20	; 32
 152:	80 83       	st	Z, r24
		break;
 154:	11 c0       	rjmp	.+34     	; 0x178 <SetupADC+0xd8>
		case PC6 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 156:	ec e7       	ldi	r30, 0x7C	; 124
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 7f       	andi	r24, 0xF8	; 248
 15e:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2)|(1<<MUX1);
 160:	80 81       	ld	r24, Z
 162:	86 60       	ori	r24, 0x06	; 6
 164:	80 83       	st	Z, r24
		break;
 166:	08 c0       	rjmp	.+16     	; 0x178 <SetupADC+0xd8>
		case PC7 :
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 168:	ec e7       	ldi	r30, 0x7C	; 124
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	88 7f       	andi	r24, 0xF8	; 248
 170:	80 83       	st	Z, r24
		ADMUX|=(1<<MUX2)|(1<<MUX1)|(1<<MUX0);
 172:	80 81       	ld	r24, Z
 174:	87 60       	ori	r24, 0x07	; 7
 176:	80 83       	st	Z, r24
		break;
	}
	//JUSTIFICACION IZQUIERDA
	ADMUX |= (1<<ADLAR);
 178:	ec e7       	ldi	r30, 0x7C	; 124
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 62       	ori	r24, 0x20	; 32
 180:	80 83       	st	Z, r24
	//REFERENCIA INTERNA
	ADMUX |= (1<<REFS0);
 182:	80 81       	ld	r24, Z
 184:	80 64       	ori	r24, 0x40	; 64
 186:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCION
	ADCSRA |= (1<<ADIE);
 188:	ea e7       	ldi	r30, 0x7A	; 122
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	80 83       	st	Z, r24
	//PRESCALER 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 192:	80 81       	ld	r24, Z
 194:	87 60       	ori	r24, 0x07	; 7
 196:	80 83       	st	Z, r24
	//HABILITAR
	ADCSRA |= (1<<ADEN);
 198:	80 81       	ld	r24, Z
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <I2C_Slave_Init>:
	}
}

//Función para inicializar I2C esclavo
void I2C_Slave_Init(uint8_t address){
	DDRC &= ~((1<<DDC4)|(1<<DDC5));
 1a0:	97 b1       	in	r25, 0x07	; 7
 1a2:	9f 7c       	andi	r25, 0xCF	; 207
 1a4:	97 b9       	out	0x07, r25	; 7
	
	TWAR = address << 1 & 0b11111110; //Se asigna la dirección que tendra
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	//TWAR = (address << 1| 0x01); //Se asigna la dirección que tendra y habilita
	
	//Se habilita la interfaz, ACK automatico, se habilita la ISR
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
 1b0:	85 e4       	ldi	r24, 0x45	; 69
 1b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b6:	08 95       	ret

000001b8 <main>:



int main(void)
{
   cli();
 1b8:	f8 94       	cli
   DDRD |= (1<<DDD2);
 1ba:	8a b1       	in	r24, 0x0a	; 10
 1bc:	84 60       	ori	r24, 0x04	; 4
 1be:	8a b9       	out	0x0a, r24	; 10
   PORTD &= ~(1<<PORTD2);
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	8b 7f       	andi	r24, 0xFB	; 251
 1c4:	8b b9       	out	0x0b, r24	; 11
   
   I2C_Slave_Init(SlaveAddress);
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <I2C_Slave_Init>
   SetupADC(PC6);
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	0e 94 50 00 	call	0xa0	; 0xa0 <SetupADC>
   sei();
 1d2:	78 94       	sei
	
    while (1) 
    {
		ADCSRA |= (1<<ADSC);
 1d4:	ea e7       	ldi	r30, 0x7A	; 122
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	80 64       	ori	r24, 0x40	; 64
 1dc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	83 ed       	ldi	r24, 0xD3	; 211
 1e2:	90 e3       	ldi	r25, 0x30	; 48
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x2c>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x36>
 1ee:	00 00       	nop
 1f0:	f1 cf       	rjmp	.-30     	; 0x1d4 <main+0x1c>

000001f2 <__vector_24>:
		
			
    }
}

ISR(TWI_vect){
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	8f 93       	push	r24
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
	uint8_t estado = TWSR & 0xF8;
 202:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 206:	88 7f       	andi	r24, 0xF8	; 248
	switch(estado){
 208:	80 39       	cpi	r24, 0x90	; 144
 20a:	c9 f0       	breq	.+50     	; 0x23e <__vector_24+0x4c>
 20c:	38 f4       	brcc	.+14     	; 0x21c <__vector_24+0x2a>
 20e:	80 37       	cpi	r24, 0x70	; 112
 210:	81 f0       	breq	.+32     	; 0x232 <__vector_24+0x40>
 212:	80 38       	cpi	r24, 0x80	; 128
 214:	a1 f0       	breq	.+40     	; 0x23e <__vector_24+0x4c>
 216:	80 36       	cpi	r24, 0x60	; 96
 218:	41 f5       	brne	.+80     	; 0x26a <__vector_24+0x78>
 21a:	0b c0       	rjmp	.+22     	; 0x232 <__vector_24+0x40>
 21c:	88 3b       	cpi	r24, 0xB8	; 184
 21e:	a9 f0       	breq	.+42     	; 0x24a <__vector_24+0x58>
 220:	18 f4       	brcc	.+6      	; 0x228 <__vector_24+0x36>
 222:	88 3a       	cpi	r24, 0xA8	; 168
 224:	91 f0       	breq	.+36     	; 0x24a <__vector_24+0x58>
 226:	21 c0       	rjmp	.+66     	; 0x26a <__vector_24+0x78>
 228:	80 3c       	cpi	r24, 0xC0	; 192
 22a:	c9 f0       	breq	.+50     	; 0x25e <__vector_24+0x6c>
 22c:	88 3c       	cpi	r24, 0xC8	; 200
 22e:	b9 f0       	breq	.+46     	; 0x25e <__vector_24+0x6c>
 230:	1c c0       	rjmp	.+56     	; 0x26a <__vector_24+0x78>
		case 0x60:  // SLA+W recibido, ACK enviado
		case 0x70:  // Dirección de transmisión general recibida, ACK enviado
			TWCR |= (1<<TWINT) | (1<<TWEA);  // Preparar para recibir más datos
 232:	ec eb       	ldi	r30, 0xBC	; 188
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	80 6c       	ori	r24, 0xC0	; 192
 23a:	80 83       	st	Z, r24
			break;
 23c:	1b c0       	rjmp	.+54     	; 0x274 <__vector_24+0x82>
		case 0x80:  // Dato recibido, ACK enviado
		case 0x90:  // Dato recibido en modo transmisión general, ACK enviado
			TWCR |= (1<<TWINT) | (1<<TWEA);  // Preparar para recibir más datos
 23e:	ec eb       	ldi	r30, 0xBC	; 188
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	80 6c       	ori	r24, 0xC0	; 192
 246:	80 83       	st	Z, r24
			break;
 248:	15 c0       	rjmp	.+42     	; 0x274 <__vector_24+0x82>
		case 0xA8:  // SLA+R recibido, ACK enviado
		case 0xB8:  // Dato transmitido, ACK recibido
			TWDR = POT1;  // Enviar valor de ADC
 24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			TWCR |= (1<<TWINT) | (1<<TWEA);  // Preparar para la siguiente transmisión
 252:	ec eb       	ldi	r30, 0xBC	; 188
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	80 6c       	ori	r24, 0xC0	; 192
 25a:	80 83       	st	Z, r24
			break;
 25c:	0b c0       	rjmp	.+22     	; 0x274 <__vector_24+0x82>
		case 0xC0:  // Dato transmitido, NACK recibido
		case 0xC8:  // Último dato transmitido, ACK recibido
			TWCR |= (1<<TWINT) | (1<<TWEA);  // Preparar para la próxima recepción
 25e:	ec eb       	ldi	r30, 0xBC	; 188
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 6c       	ori	r24, 0xC0	; 192
 266:	80 83       	st	Z, r24
			break;
 268:	05 c0       	rjmp	.+10     	; 0x274 <__vector_24+0x82>
		default:  // Se libera el bus de cualquier error
			TWCR |= (1<<TWINT) | (1<<TWSTO);
 26a:	ec eb       	ldi	r30, 0xBC	; 188
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 69       	ori	r24, 0x90	; 144
 272:	80 83       	st	Z, r24
	}
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	8f 91       	pop	r24
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <__vector_21>:

ISR(ADC_vect){
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	8f 93       	push	r24
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
	POT1 = ADCH;
 294:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 298:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADCSRA |= (1<<ADIF); 
 29c:	ea e7       	ldi	r30, 0x7A	; 122
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	80 61       	ori	r24, 0x10	; 16
 2a4:	80 83       	st	Z, r24
 2a6:	ff 91       	pop	r31
 2a8:	ef 91       	pop	r30
 2aa:	8f 91       	pop	r24
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <__tablejump2__>:
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	05 90       	lpm	r0, Z+
 2bc:	f4 91       	lpm	r31, Z
 2be:	e0 2d       	mov	r30, r0
 2c0:	09 94       	ijmp

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
